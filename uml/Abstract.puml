@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
    + {abstract} response(): void
}

interface Responser{
    + {abstract} response(): void
}

Responser <|.. AbstractFlyingObject

abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    # shootNum: int
    # power: int
    # direction: int
    # context: Context
    # isOutOfBounds: boolean
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + outOfBounds(): void
    + getIsOutOfBounds(): boolean
    + getProp(): List<BaseProp>
    + getScore(): int
    + getOneProp(int selectNum, int count): BaseProp
    + forward(): void
    + getShootNum(): int
    + getPower(): int
    + getDirection(): int
    + changeStrategy(Strategy strategy, int shootNum): void
    + executeStrategy(): List<BaseBullet>
    + {abstract} shoot():List<BaseBullet>
 }

abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
	+ response(): void
}

abstract class BaseProp {
    + BaseProp(int locationX, int locationY, int speedX, int speedY)
    + forward():void
}


AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet
AbstractFlyingObject <|-- BaseProp

@enduml