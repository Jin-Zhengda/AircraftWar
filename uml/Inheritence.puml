@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
    + {abstract} response(): void
}

interface Responser{
    + {abstract} response(): void
}

Responser <|.. AbstractFlyingObject

abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    # shootNum: int
    # power: int
    # direction: int
    # context: Context
    # isOutOfBounds: boolean
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + outOfBounds(): void
    + getIsOutOfBounds(): boolean
    + getProp(): List<BaseProp>
    + getScore(): int
    + getOneProp(int selectNum, int count): BaseProp
    + forward(): void
    + getShootNum(): int
    + getPower(): int
    + getDirection(): int
    + changeStrategy(Strategy strategy, int shootNum): void
    + executeStrategy(): List<BaseBullet>
    + {abstract} shoot():List<BaseBullet>
 }


class HeroAircraft {
    - heroAircraft: HeroAircraft
    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + {static} getHeroAircraft():HeroAircraft
    + shoot():List<BaseBullet>
    + increaseHp(int hpUp): int
}

AbstractAircraft <|-- HeroAircraft

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + shoot():List<BaseBullet>
    + getScore(): int
    + response(): void
}

AbstractAircraft <|-- MobEnemy

class EliteEnemy {
    + EliteEnemy(int locationX, int locationY, int speedX, int sppedY, int hp, int shootNum)
    + getScore(): int
    + getProp(): List<BaseProp>
    + shoot():List<BaseBullet>
    + response(): void
}

AbstractAircraft <|-- EliteEnemy

class ElitePlusEnemy {
    + ElitePlusEnemy(int locationX, int locationY, int speedX, int sppedY, int hp, int shootNum)
    + getScore(): int
    + getProp(): List<BaseProp>
    + shoot():List<BaseBullet>
    + response(): void
}

AbstractAircraft <|-- ElitePlusEnemy

class BossEnemy {
    + BossEnemy(int locationX, int locationY, int speedX, int sppedY, int hp, int shootNum)
    + getScore(): int
    + getProp(): List<BaseProp>
    + shoot():List<BaseBullet>
}

AbstractAircraft <|-- BossEnemy

abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
	+ response(): void
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + response(): void
}

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet

abstract class BaseProp {
    + BaseProp(int locationX, int locationY, int speedX, int speedY)
    + forward():void
}

class HpProp {
    - hpRecover: int
    + HpProp(int locationX, int locationY, int speedX, int speedY, int hpRecover)
    + getHpRecover(): int
}

class PowerProp {
    + PowerProp(int locationX, int locationY, int speedX, int speedY)
}

class SuperPowerProp {
    + SuperPowerProp(int locationX, int locationY, int speedX, int speedY)
}

class BoomProp {
    - bomb: boolean
    - responserList: List<AbstractFlyingObject>
    + BoomProp(int locationX, int locationY, int speedX, int speedY)
    + bomb(): void
    + registerAllEnemies(List<AbstractAircraft> allEnemies): void
    + registerAllBullets(List<BaseBullet> allBullets): void
    + notifyResponse(): void
    + checkIsBomb(): void
}

BaseProp <|-- HpProp
BaseProp <|-- PowerProp
BaseProp <|-- SuperPowerProp
BaseProp <|-- BoomProp

AbstractFlyingObject <|-- BaseProp
@enduml